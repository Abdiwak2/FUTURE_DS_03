# -*- coding: utf-8 -*-
"""Task_3

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1b-8VdqJluqXztCIk0XScU1KhygM4evL4
"""

# --- Install required packages ---
!pip install dash plotly -q

# --- Imports ---
import pandas as pd
from dash import Dash, dcc, html, Input, Output
import plotly.express as px

# --- Load CSV ---
df = pd.read_csv("student_feedback.csv")

# --- Remove ID columns ---
for col in ["Unnamed: 0", "Student ID"]:
    if col in df.columns:
        df = df.drop(columns=[col])

# --- Define rating columns ---
rating_columns = [
    "Well versed with the subject",
    "Explains concepts in an understandable way",
    "Use of presentations",
    "Degree of difficulty of assignments",
    "Solves doubts willingly",
    "Structuring of the course",
    "Provides support for students going above and beyond",
    "Course recommendation based on relevance"
]

# --- Precompute ---
avg_ratings = df[rating_columns].mean()
recommendation_counts = df["Course recommendation based on relevance"].value_counts().sort_index()

# --- Dash App ---
app = Dash(__name__)

app.layout = html.Div([
    html.H1("Student Feedback Dashboard", style={"textAlign": "center", "color": "white"}),

    # Global Filters
    html.Div([
        html.Div([
            html.Label("Select Question:", style={"fontWeight": "bold"}),
            dcc.Dropdown(
                id="global-question",
                options=[{"label": col, "value": col} for col in rating_columns] + [{"label": "All Questions", "value": "all"}],
                value="all",
                style={"width": "90%"}
            )
        ], style={"width": "40%", "display": "inline-block"}),

        html.Div([
            html.Label("Select Rating Group:", style={"fontWeight": "bold"}),
            dcc.Dropdown(
                id="global-rating",
                options=[
                    {"label": "All Ratings", "value": "all"},
                    {"label": "Low (1–3)", "value": "low"},
                    {"label": "Medium (4–6)", "value": "medium"},
                    {"label": "High (7–9)", "value": "high"},
                    {"label": "Excellent (10)", "value": "excellent"},
                ],
                value="all",
                style={"width": "90%"}
            )
        ], style={"width": "40%", "display": "inline-block", "marginLeft": "20px"})
    ], style={"marginBottom": "20px"}),

    # Row 1: Average Ratings + Pie chart
    html.Div([
        dcc.Graph(id="avg-bar", style={"height": "350px"}),  # reduced height
        dcc.Graph(id="recommendation-pie", style={"height": "350px"})
    ], style={"display": "flex"}),

    # Row 2: Rating distribution (bar) + Line chart
    html.Div([
        dcc.Graph(id="rating-distribution"),
        dcc.Graph(id="trend-line")
    ], style={"display": "flex"})
])

# --- Helper: Apply rating filter ---
def filter_data(question, rating_group):
    filtered = df.copy()

    # Question filter
    if question != "all":
        filtered = filtered[[question]]

    # Rating group filter
    if rating_group == "low":
        filtered = filtered[(filtered >= 1) & (filtered <= 3)]
    elif rating_group == "medium":
        filtered = filtered[(filtered >= 4) & (filtered <= 6)]
    elif rating_group == "high":
        filtered = filtered[(filtered >= 7) & (filtered <= 9)]
    elif rating_group == "excellent":
        filtered = filtered[filtered == 10]

    return filtered.dropna()

# --- Callbacks ---
@app.callback(
    [Output("avg-bar", "figure"),
     Output("recommendation-pie", "figure"),
     Output("rating-distribution", "figure"),
     Output("trend-line", "figure")],
    [Input("global-question", "value"),
     Input("global-rating", "value")]
)
def update_charts(selected_question, rating_group):
    filtered = filter_data(selected_question, rating_group)

    # Average Ratings Bar
    if selected_question == "all":
        avg_vals = filtered.mean()
    else:
        avg_vals = pd.Series(filtered[selected_question].mean(), index=[selected_question])
    fig1 = px.bar(avg_vals, title="Average Ratings", labels={"index": "Criteria", "value": "Average Score"})

    # Pie Chart (recommendation distribution) – only works if recommendation column available
    if "Course recommendation based on relevance" in filtered.columns:
        pie_counts = filtered["Course recommendation based on relevance"].value_counts().sort_index()
    else:
        pie_counts = pd.Series([])
    fig2 = px.pie(values=pie_counts.values, names=pie_counts.index, title="Course Recommendation Distribution")

    # Rating Distribution Bar (counts of each rating)
    if selected_question == "all":
        melted = filtered.melt(value_vars=filtered.columns, var_name="Question", value_name="Rating")
    else:
        melted = filtered.rename(columns={selected_question: "Rating"})[["Rating"]]
        melted["Question"] = selected_question
    fig3 = px.histogram(melted, x="Rating", color="Question", barmode="group", nbins=10,
                        title="Rating Distribution")

    # Trend Line (average ratings per question)
    if selected_question == "all":
        trend = filtered.mean().reset_index()
        trend.columns = ["Question", "Average"]
        fig4 = px.line(trend, x="Question", y="Average", markers=True, title="Trend of Average Ratings")
    else:
        trend = filtered[selected_question].reset_index(drop=True).reset_index()
        trend.columns = ["Index", "Rating"]
        fig4 = px.line(trend, x="Index", y="Rating", title=f"Trend for {selected_question}")
    return fig1, fig2, fig3, fig4

# --- Run in Colab ---
app.run(mode="inline")